#include <iostream>
#include <fstream>
#include <utility>

bool verticalmirror = true;
bool piecetypemirror = true;

int mps[6][64] =
        {{-27, -44, -4, 6, 6, -4, -14, -24, 
        -44, -7, 26, 26, 26, 4, 4, -14, 
        -34, 3, 7, 0, -3, 26, 23, -23, 
        -29, -16, 4, -11, -11, 33, 36, 1, 
        -17, 6, -9, -11, -11, 11, 22, -22, 
        1, 4, 7, 4, 14, -4, 31, -1, 
        -5, 16, 20, 9, 5, 20, 26, -10, 
        -29, -34, -5, 13, 16, 6, -13, -21},

        {26, 7, -4, -4, -4, -4, -5, 26, 
        13, 26, 48, 13, 28, 37, 26, 39, 
        6, 14, -4, -4, -8, 20, 9, 13, 
        7, -5, 26, 26, -4, 26, 5, 0, 
        11, 4, -4, 10, -4, 25, 4, -13, 
        6, 9, 5, -4, 4, -19, 3, 7, 
        -19, -26, -11, -21, -4, 2, -13, -19, 
        -5, -4, 12, 19, 23, 13, 6, -6},

        {-71, -61, -26, -26, -34, -42, -46, -53, 
        -66, -16, -14, -26, 4, -10, -16, -44, 
        -43, -11, 9, -16, -14, 10, -9, -45, 
        -6, -1, 11, 8, 27, 11, 18, -16, 
        6, 15, 10, 16, 23, 22, -21, -4, 
        -24, 6, 6, 26, 20, 2, 4, -34, 
        -26, -24, -9, 0, -1, -5, -24, -30, 
        -49, -14, -4, -30, -32, -18, -14, -54},

        {-41, -39, -12, -45, -22, -34, -39, -66, 
        -29, 1, -21, -16, 0, -20, -16, -31, 
        -40, -2, -3, -1, -4, 16, 3, -16, 
        -19, -10, 36, 4, 51, -6, 4, -19, 
        -3, -13, 11, 51, 4, 18, 8, -14, 
        0, 5, 6, -6, 22, -6, 1, -13, 
        -46, -14, 4, -11, 11, -5, -6, -34, 
        -27, -46, -14, -28, -14, -16, -39, -40},

        {0, 0, 0, 0, 0, 0, 0, 0, 
        -21, 0, 0, 4, -16, 0, 0, -21, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, -6, 4, 0, 0, 8, -6, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        -15, 0, 0, -16, -16, 0, 0, -4, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, -46, -21, 0, 0, -20, -24, 0},

        {0, 0, 0, 0, 0, 0, 0, 0, 
        -5, -6, 1, 4, 17, 21, -1, 16, 
        -11, -2, -8, 2, 2, -7, -8, -11, 
        -1, -1, 8, 25, -1, 5, -17, -18, 
        -4, 2, 14, 20, 27, 8, -7, -14, 
        -11, 13, 16, 36, 12, 13, -2, -12, 
        -21, -14, -4, -4, -4, -8, -14, -24, 
        0, 0, 0, 0, 0, 0, 0, 0}};

int eps[6][64] =
        {{-74, -66, -54, -44, -44, -54, -64, -74, 
        -72, -14, -4, 6, 6, -4, -14, -64, 
        -54, -4, 19, 9, 9, 19, -4, -54, 
        -44, 6, 30, 44, 44, 19, 6, -44, 
        -52, 6, 9, 44, 44, 22, 6, -44, 
        -54, -13, 12, 17, 32, 20, -4, -54, 
        -64, -21, -19, 6, 5, -4, -14, -64, 
        -74, -81, -54, -45, -44, -54, -64, -88},

        {26, 15, -3, -1, 21, -2, -4, 26, 
        1, 6, -2, 7, 7, -10, 6, 8, 
        -4, -14, -4, -4, -15, -4, -10, -16, 
        21, 26, 2, 16, -4, 6, -4, 5, 
        6, 4, -4, -26, -4, -9, -4, 21, 
        4, -2, 6, 15, 4, -14, 2, 18, 
        1, 11, -4, -14, -3, -24, -9, -9, 
        16, 11, 9, 9, 19, -12, 5, 16},

        {-55, -34, -26, -27, -37, -30, -28, -25, 
        -65, -16, -14, -26, 4, -1, -19, -44, 
        -39, 1, 14, -16, -15, -10, -19, -36, 
        -16, -17, 16, -6, -2, 6, 9, -23, 
        -4, 8, 8, -6, -5, -1, -2, -4, 
        -34, 11, 6, 4, -16, 8, 0, -4, 
        -32, -20, -13, 11, 3, -25, -5, -36, 
        -25, -14, -20, -29, -4, -4, -33, -45},

        {-36, -53, -38, -46, -51, -36, -39, -62, 
        -27, 1, -21, -16, -16, -3, -26, -29, 
        -30, -21, -16, -6, -6, -6, 5, -16, 
        -14, -10, -16, -6, -6, -6, 1, -33, 
        -14, -1, -11, -6, -6, -11, 8, -14, 
        -14, -20, -11, -6, -6, -6, -13, 4, 
        -56, -16, -4, -11, 11, -26, -14, -5, 
        -35, -46, -14, -29, -37, -34, -39, -40},

        {0, 0, 0, 0, 0, 0, 0, 0, 
        -13, 0, 0, -13, -16, 0, 0, -21, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, -6, 4, 0, 0, 4, -6, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        1, 0, 0, -16, -16, 0, 0, -8, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, -38, -15, 0, 0, -18, -24, 0},

        {0, 0, 0, 0, 0, 0, 0, 0, 
        29, -6, 0, 4, 4, 3, 11, 16, 
        4, -7, -8, 2, 2, -7, 14, -11, 
        -15, -3, -5, -1, -1, -16, -2, 4, 
        -14, -14, -6, -1, 13, -6, -7, -14, 
        0, -10, -1, 16, 17, 0, -11, -12, 
        -30, -14, 3, -4, -4, 3, -14, -7, 
        0, 0, 0, 0, 0, 0, 0, 0}};

int length(int n) {
    int base = 1 + (n < 0);
    n = std::abs(n);
    while (n > 9) {
        base++;
        n /= 10;
    }
    return base;
}

int main() {
    if (piecetypemirror) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 64; j++) {
                std::swap(mps[i][j], mps[5-i][j]);
                std::swap(eps[i][j], eps[5-i][j]);
            }
        }
    }
    if (verticalmirror) {
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 32; j++) {
                std::swap(mps[i][j], mps[i][56^j]);
                std::swap(eps[i][j], eps[i][56^j]);
            }
        }
    }
    std::ofstream output;
    output.open("out.txt");
    output << "mps \n";
    output << "{\n";
    for (int i = 0; i < 6; i++) {
        output << "    {";
        for (int j = 0; j < 64; j++) {
            for (int k = 0; k < 4-length(mps[i][j])-(j == 0); k++) {
                output << " ";
            }
            output << mps[i][j] << ",";
            if ((j % 8 == 7) && (j < 63)) {
                output << "\n    ";
            }
        }
        output << "},\n\n";
    }
    output << "}\n\n";
    output << "eps \n";
    output << "{\n";
    for (int i = 0; i < 6; i++) {
        output << "    {";
        for (int j = 0; j < 64; j++) {
            for (int k = 0; k < 4-length(eps[i][j]) - (j == 0); k++) {
                output << " ";
            }
            output << eps[i][j] << ",";
            if ((j % 8 == 7) && (j < 63)) {
                output << "\n    ";
            }
        }
        output << "},\n\n";
    }
}